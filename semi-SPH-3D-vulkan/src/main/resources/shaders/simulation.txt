#version 450

#define loop(i,x) for(int i = 0; i < x; i++)
#define range(i,a,b) for(int i = a; i <= b; i++)

#define fluid_rho 0.5

#define dt 0.5

struct particle {

	vec3 position;
	float mass;
	vec3 velocity;
    float extra;
    vec4 cor;
    
};


layout(std140, binding = 0) readonly buffer ParticleSSBOIn {
   particle particlesIn[ ];
};

layout(std140, binding = 1) buffer ParticleSSBOOut {
   particle particlesOut[ ];
};

layout (binding = 2) uniform SizeArray {
    ivec3 size;
}iResolution;

layout (binding = 3) uniform Times {
    float deltaTime;
}time;


layout (local_size_x = 11, local_size_y = 11, local_size_z = 8) in;


uint getIndex(vec3 pos) {
    // Calcule o índice com base na posição (x, y, z) na matriz 3D
    uint index = uint(pos.x + pos.y * iResolution.size.x + pos.z * iResolution.size.x * iResolution.size.y);
    
    //index = clamp(index, 0, iResolution.size.x * iResolution.size.y * iResolution.size.z - 1);
    
    return index;
}

particle getParticle(vec3 pos)
{
	particle P = particlesIn[getIndex(pos)];
	
	
	//P.position += pos;
	return P;
}

void saveParticle(particle P, vec3 pos)
{
	
	P.position +=  clamp(P.position - pos, vec3(-0.5), vec3(0.5));
	particlesOut[getIndex(pos)] = P;
}

float Pf(particle P)
{
    float rho = P.mass;
    // if (P.M.w < 0.1){
    //     return 0.2*rho; //gas

    // }
    float GF = 1.;//smoothstep(0.49, 0.5, 1. - rho.y);
    return mix(0.5*rho, 0.04*rho * (rho/fluid_rho - 1.) , GF); //water pressure
}

float G(vec3 x)
{
    return exp(-dot(x,x));
}

void borda(inout particle P){
	float lim = 0.05;
	vec3 minLim = vec3(iResolution.size) *lim;
	vec3 maxLim = vec3(iResolution.size) *(1-lim);
	
	vec3 pos =  P.position+ P.velocity;
	vec3 vel = abs(P.velocity);
	
	if(pos.x-minLim.x < 0){
		P.velocity.x = vel.x;
	}
	if(pos.y-minLim.y < 0){
		P.velocity.y = vel.y;
	}
	if(pos.z-minLim.z < 0){
		P.velocity.z = vel.z;
	}
	if(pos.x-maxLim.x > 0){
		P.velocity.x = -vel.x;
	}
	if(pos.y-maxLim.y > 0){
		P.velocity.y = -vel.y;
	}
	if(pos.z-maxLim.z > 0){
		P.velocity.z = -vel.z;
	}
	
}

void Simulation(inout particle P, vec3 pos)
{
	
	//Compute the SPH force
    vec3 F = vec3(0.);
    vec4 avgV = vec4(0.);
    
    
    for(int i = -1; i <= 1; i++)
    for(int j = -1; j <= 1; j++)
    for(int k = -1; k <= 1; k++)
    {
        vec3 tpos = vec3(pos) + vec3(i,j,k);

       
        particle P0 = getParticle(tpos);
        
        vec3 dx = P0.position - P.position;
        float avgP = 0.5*P0.mass*(Pf(P) + Pf(P0)); 
        F -= 0.5 * G(1.*dx) * avgP * dx;
        avgV += P0.mass * G(1.*dx) * vec4(P0.velocity,1.);
        
    }
	
	avgV.xyz /= avgV.w;

    //viscosity
    F += 0.*P.mass*(avgV.xyz - P.velocity);
    
    //gravity
    F += P.mass*vec3(0., -0.004, 0.);
    
    
    //integrate
    P.velocity += F*dt/P.mass;
    
    //border
    borda(P);
    
    //velocity limit
    float v = length(P.velocity);
    P.velocity /= (v > 1.)?v:1.;
    P.velocity = clamp(P.velocity,vec3(-1.0),vec3(1.0));
    
    

}


void main() 
{
   vec3 index = vec3(gl_GlobalInvocationID);
   
   particle P = getParticle(index);
   //P.cor.xyz = P.position;
   
   
   
   
   if(P.mass>0.0){
   	
   		Simulation(P,index);
   		//P.cor = vec4(1.0);
   }
   
   if(length(vec3(index).xy - (iResolution.size*0.8).xy) < 3. &&index.z <3){
   		
   		P.position = vec3(index);
   		P.velocity = -vec3(0.3,0.5,0.);
   		P.mass = 1.0;
   		P.cor = vec4(0.0,0.0,1.0,0.0);
   }
   
   if(length(vec3(index) - vec3(0.0,0.0,00.0)) < 5.){
   		P.position = vec3(index);
   		P.velocity = vec3(0.1,0.5,0.1);
   		P.mass = 0.5;
   		P.cor = vec4(1.0,0.0,0.0,0.0);
   }
   P.position = vec3(index);
   P.extra = 222.0;
   
   
   saveParticle(P,index);
   
    

}